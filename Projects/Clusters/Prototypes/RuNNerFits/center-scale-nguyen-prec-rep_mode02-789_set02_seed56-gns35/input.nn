### #############################################################
### This is the input file for RuNNer (version 0_44 and upwards)
### #############################################################
### General remarks: 
### - commands can be switched off by using the # character at the BEGINNING of the line
### - the input file can be structured by blank lines and comment lines
### - the order of the keywords is arbitrary
### - if keywords are missing, default values will be used and written to runner.out
### - if mandatory keywords or keyword options are missing, RuNNer will stop with an error message 

########################################################################################################################
### general keywords
########################################################################################################################
nn_type_short 1                                 # 1=Behler-Parrinello, 2=Pair NN
runner_mode 3                             # 1=calculate symmetry functions, 2=fitting mode, 3=predicition mode (mode)
number_of_elements 2                      # number of elements                                   (nelem)                       MODE1+2+3+4
elements H O                            # specification of elements                            (element)                     MODE1+2+3+4
random_seed 56                          # seed for initial random weight parameters and train/test splitting (iseed)         MODE1+2
random_number_type 1                      # 1=ran0, 2=ran1, 3=ran2, 4=ran3
remove_atom_energies                      # remove atomic energies before fitting                (lremoveatomenergies)         MODE1+2+3+4
atom_energy H    -0.50525907              # free atom reference energy (Ha) (atomic zora)
atom_energy O    -75.16636428             # free atom reference energy (Ha) (atomic zora)
#energy_threshold -0.166746138                # energythreshold for fitting data in Ha per atom      (fitethres)                   MODE1
bond_threshold 0.5d0                      # threshold for the shortest bond in structure         (rmin)                        MODE1+2+3
#normalize_nodes                           # normalize input of nodes                              (lnormnodes)                 MODE2+3
#detailed_timing_epoch
#initialization_only
#environment_analysis
########################################################################################################################
### NN structure of the short-range NN  
########################################################################################################################
use_short_nn                              # use NN for short range interactions                  (lshort) 
global_hidden_layers_short 2              # number of hidden layers                              (num_layersshort-1)
global_nodes_short 35 35                  # number of nodes in hidden layers                     (nodes_short)
global_activation_short t t l             # activation functions                                 (actfunc_short)

########################################################################################################################
### symmetry function generation ( mode 1): 
########################################################################################################################
#use_atom_energies                        # use atomic energies for fitting (not implemented)    (luseatomenergies)                     MODE1+2+3+4
#use_atom_charges                          # use atomic charges for fitting(set always true!)     (luseatomcharges)                      MODE1+2+3+4
test_fraction 0.10000                     # threshold for splitting between fitting and test set (splitthres)                           MODE1
#CAUTION: don't forget use_short_forces below (if you want to generate the training files for the forces)

########################################################################################################################
### symmetry function definitions (all modes): 
########################################################################################################################
# INFO: not yet implemented in this file
# INFO: symfunction format: reference atom, type, neighbor element 1 (and neighbor element 2), symfunction parameters 
#
#### SymF Type 2 ####


symfunction_short H 2 H 0.010 0.0 19.0000  
symfunction_short H 2 H 0.030 0.0 19.0000  
symfunction_short H 2 H 0.070 0.0 19.0000  
#symfunction_short H 2 H 2.000 0.0 19.0000  

symfunction_short H 2 O 0.010 0.0 19.0000  
symfunction_short H 2 O 0.030 0.0 19.0000  
symfunction_short H 2 O 0.070 0.0 19.0000  
symfunction_short H 2 O 2.000 0.0 19.0000  

symfunction_short O 2 H 0.010 0.0 19.0000  
symfunction_short O 2 H 0.030 0.0 19.0000  
symfunction_short O 2 H 0.070 0.0 19.0000  
symfunction_short O 2 H 2.000 0.0 19.0000  

symfunction_short O 2 O 0.010 0.0 19.0000  
symfunction_short O 2 O 0.030 0.0 19.0000  
symfunction_short O 2 O 0.070 0.0 19.0000  
#symfunction_short O 2 O 2.000 0.0 19.0000  


symfunction_short H 3 H H 0.001  -1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H H 0.010   1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H H 0.070  -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H H 0.200   1.0 1.0 19.0000  ! eta lambda zeta funccutoff

symfunction_short H 3 H O 0.010  1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H O 0.010 -1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H O 0.030  1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H O 0.030 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H O 0.070  1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H O 0.070 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 H O 0.200  1.0 1.0 19.0000  ! eta lambda zeta funccutoff

symfunction_short H 3 O O 0.001 -1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 O O 0.001  1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 O O 0.030 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short H 3 O O 0.030  1.0 1.0 19.0000  ! eta lambda zeta funccutoff

symfunction_short O 3 H H 0.010 -1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 H H 0.010  1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 H H 0.030 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 H H 0.030  1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 H H 0.070 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 H H 0.070  1.0 1.0 19.0000  ! eta lambda zeta funccutoff

symfunction_short O 3 O H 0.001  1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 O H 0.001 -1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 O H 0.030  1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 O H 0.030 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff

symfunction_short O 3 O O 0.001 -1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 O O 0.001  1.0 4.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 O O 0.030 -1.0 1.0 19.0000  ! eta lambda zeta funccutoff
symfunction_short O 3 O O 0.030  1.0 1.0 19.0000  ! eta lambda zeta funccutoff


# CUSTOMIZED SYMMETRY FUNCTIONS FOR SHORT RANGE NN
# SAMPLE TYPE 1: symfunction_short O 1  O 2.0                             ! central_atom type neighbor_atom funccutoff 
# SAMPLE TYPE 2: symfunction_short O 2  O 7.14214 0.0 11.338              ! central_atom type neighbor_atom eta rshift funccutoff
# SAMPLE TYPE 3: symfunction_short O 3 Zn Zn 0.03571 -1.0 16.0  7.55891   ! central_atom type neighbor_atom1 neighbor_atom2 eta lambda zeta funccutoff
# SAMPLE TYPE 4: symfunction_short O 4  O 7.14214 11.338                  ! central_atom type neighbor_atom eta funccutoff
# SAMPLE TYPE 5: symfunction_short O 5 1.000                              ! central_atom type eta                         ! CARTESIAN COORDIATES 
# SAMPLE TYPE 6: symfunction_short O 6  O 11.338                          ! central_atom type neighbor_atom funccutoff    ! BOND LENGTH
# SAMPLE TYPE 7: not implemented 
# SAMPLE TYPE 8: symfunction_short O 8 Zn Zn 0.002 30.0 11.338            ! central_atom type neighbor_atom1 neighbor_atom2 eta rshift(in degree) funccutoff ! angular function 

# SYMMETRY FUNCTIONS FOR ELECTROSTATIC NN HAVE THE SAME FORMAT, BUT REPLACE "short" by "electrostatic"
# GLOBAL SYMMETRY FUNCTIONS FOR ELECTROSTATIC NN
#global_symfunction_electrostatic 2 7.14214 0.0 11.338  ! eta rshift funccutoff

########################################################################################################################
### fitting (mode 2):general inputs for short range AND electrostatic part:
########################################################################################################################
fitmode 1                                 # 1 = online learning, 2 = offline learning
epochs 50                                 # number of epochs                                     (nepochs)                              MODE2
points_in_memory 200                      # max number of structures in memory                   (nblock)                               MODE2
#random_order_training                     # training with random order of points                 (lrandomtrain)                         MODE2
mix_all_points
#save_kalman_matrices                      # save Kalman filter matrices                          (lsavekalman)                          MODE2
#read_kalman_matrices                      # restart using old Kalman filter matrices             (lrestkalman)                          MODE2
scale_symmetry_functions
center_symmetry_functions                 # remove center of mass of structure function values   (lcentersym)                           MODE2+3+4
#fix_weights                               # fix some weights                                     (lfixweights)                          MODE2
#growth_mode 100 5                          # growth mode                                          (lgrowth,ngrowth,growthstep)           MODE2
#use_damping 0.00001d0                     # use weight decay                                     (ldampw,dampw)                         MODE2
#update_single_element 30                  # do weight update just for one element                (lupdatebyelement,elemupdate)          MODE2
fitting_unit  eV                           # unit for error output in mode 2 (eV or Ha)
#joint_energy_force_update                  # for each atom do one update for energy and averaged forces together (not yet working well) 
#reset_kalman                               # reset Kalman matrices each epoch                     (lresetkalman)                         MODE2
#write_fit_statistics                      # write statistics on usage of points for fitting (lfitstats)
#use_omp_mkl                               # in parallel case use omp version of mkl (specify MKL_NUM_THREADS and OMP_NUM_THREADS)      MODE2
#restrict_weights 5.0                      # max range of numerical weight values, if negative => no restriction applied                MODE2
#analyze_error                             # analyze errors in trainpoints, trainforces and traincharges files                           MODE2
#use_old_scaling                           # restart with old scaling.data and/or scalinge.data files                                    MODE2
precondition_weights
#print_convergence_vector                 # print convergence vector    MODE2
#print_mad                                # print mean absolute deviation (error)   MODE2 
#symfunction_correlation
########################################################################################################################
### fitting options ( mode 2): short range part only:
########################################################################################################################
optmode_short_energy 1                    # optimization mode short range energies(optmodee, 1=Kalman filter, 2=conjugate gradient, 3=steepest descent) 
optmode_short_force 1                     # optimization mode short range forces  (optmodef, 1=Kalman filter, 2=conjugate gradient, 3=steepest descent) 
short_energy_error_threshold 0.00000    # threshold of adaptive Kalman filter short E          (kalmanthreshold)                      MODE2
#fixed_short_energy_error_threshold 0.1    # fixed short range energy error threshold for update in Ha/atom (lfixederror,fixederror)     MODE2
short_force_error_threshold 0.000000     # threshold of adaptive Kalman filter short F          (kalmanthresholdf)                     MODE2
#fixed_short_force_error_threshold 0.1     # fixed short range force error threshold for update in Ha/Bohr (lfixederrorf,fixederrorf)    MODE2
kalman_lambda_short 0.98000               # Kalman parameter short E/F                           (kalmanlambda)                         MODE2
kalman_nue_short 0.99890                  # Kalman parameter short E/F                           (kalmannue)                            MODE2
kalman_damp_short 1.0
kalman_damp_force 1.0
#steepest_descent_step_energy_short 0.01d0 # step size for steepest descent energy                (steepeststepe)                        MODE2
#steepest_descent_step_force_short 0.01d0  # step size for steepest descent force                 (steepeststepf)                        MODE2
#use_old_weights_short                     # restart fitting with old weight parameters for short (luseoldweightsshort)                  MODE2
#update_worst_short_energies 0.1d0         # percentage of the worst energies used for update     (worste)                               MODE2
#update_worst_short_forces 0.1d0           # percentage of the worst forces used for update       (worstf)                               MODE2
#force_update_scaling -1.0d0               # scaling factor for the force update (negative value means automatic scaling) (scalefactorf) MODE2
#force_update_scaling 1.0d0               # scaling factor for the force update (negative value means automatic scaling) (scalefactorf) MODE2
#force_update_scaling 0.04d0               # scaling factor for the force update (negative value means automatic scaling) (scalefactorf) MODE2
#short_energy_group 1                      # group energies for update                            (nenergygroup)                         MODE2
#short_energy_fraction 1.00                # percentage of energies used for fitting 100%=1.0     (energyrnd)                            MODE2
#short_force_group 20                       # group forces for update                              (nforcegroup)                          MODE2
short_force_fraction 0.01                  # percentage of forces used for fitting 100%=1.0       (forcernd)                             MODE2 
use_short_forces                          # use forces for fitting                               (luseforces)                           MODE2
#calculate_final_force                       # calculate error of forces only in final epoch to save time
#weight_constraint O all fixed               # "all" switch
#weight_constraint O interlayer 1 2 free     # "interlayer" layer1 layer2 switch
#weight_constraint Zn bias 1 2 free           # "bias layer" node switch
#weight_constraint Zn weight 1 3 2 3 free     # "weight" layer1 node1 layer2 node2 switch
#weight_constraint Zn node 1 1 free           # "node" layer node switch
weights_min -1.0                           # minimum value for initial random short range weights
weights_max 1.0                            # maximum value for initial random short range weights
#separate_bias_ini_short
#biasweights_min -1.0                           # minimum value for initial random short range weights
#biasweights_max 1.0                            # maximum value for initial random short range weights
#use_systematic_weights_short               #
nguyen_widrow_weights_short
#separate_kalman_short                     # use separate Kalman matrices for short range energies and forces (lsepkalman)        MODE2
repeated_energy_update
#max_force 0.5                            # do not use larger forces in Ha/Bohr for update                   (maxforce) MODE2
#max_energy -0.17                     
#scale_min_short 0.0                       # minimum value for scaling (scmin_short)                                              MODE2+3
#scale_max_short 1.0                       # maximum value for scaling (scmax_short)                                              MODE2+3
#noise_energy 0.0                          # in Ha/atom
#noise_force 0.0                           # in Ha/Bohr
#force_grouping_by_structure               # group all forces within one structure for fitting                                    MODE 2

########################################################################################################################
### output options for mode 2 (fitting):  
########################################################################################################################
write_weights_epoch 1                     # write set of weight parameters every ith epoch       (iwriteweight)                         MODE2
#write_temporary_weights                   # write temporary weights each data block              (lwritetmpweights)                     MODE2
#write_trainpoints                         # write trainpoints.out and testpoints.out files       (lwritetrainpoints)                    MODE2
#write_traincharges                        # write traincharges.out and testcharges.out files     (lwritetraincharges)                   MODE2
#write_trainforces                         # write trainforces.out and testforces.out files       (lwritetrainforces)                    MODE2

########################################################################################################################
### output options for mode 3 (prediction):  
########################################################################################################################
calculate_forces                          # calculate forces                                     (ldoforces)                            MODE3
#calculate_stress                          # calculate stress                                     (ldostress)(not fully implemented)     MODE3
#write_pdb                                 # write predicted structure in pdb format              (lwritepdb)                            MODE3
#write_xyz                                 # write predicted structure in xyz format              (lwritexyz)                            MODE3
#write_pov                                 # write predicted structure in pov format              (lwritepov)                            MODE3
#write_pwscf                               # write predicted structure in pwscf format            (lwritepw)                             MODE3
#enforce_totcharge 1                        # rescale charge to get neural system (1) or don't do it (0) (enforcetotcharge)               MODE3
#print_sensitivity                          # (lsens)

########################################################################################################################
### output options for debug.out file  
########################################################################################################################
#print_all_short_weights
#print_all_electrostatic_weights
#print_all_deshortdw
#print_all_dfshortdw
